## Customized config for "sim6502" target.
##
## Moves compiler's zero-page globals past $80, so they don't
## tread on important Apple 2 Monitor globals.
##
## Moves MAIN allocation area to start past Apple 2 low-res text
## pages ($400-7FF and $800-$BFF), and the Taki routines we're
## testing (~$D00 - ??).
##
## Adds a segment for faked-out Apple 2 console I/O firmware routines,
## and uses fill values in memory sections to ensure everything
## is stored contiguously (sim65 just loads the entire file, after
## the header, into memory, offset only by MAIN's start position.
## Note that it also uses MAIN's end position to determine where
## the C language stack is located.)

SYMBOLS {
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
    __MAINSTART__: type = weak, value = $8000;
    __FWSTART__:type = weak, value = $D000; # location of Apple 2 monitor's COUT
    __TAKISTART__: type = weak, value = $D00; # should use the src/Makefile-generated value...
}
MEMORY {
    ZP:     file = "",               start = $0080, size = $0080;
    HEADER: file = %O,               start = $0000, size = $000C;
    TAKI:   file = %O,
            start = __TAKISTART__,
            size = __MAINSTART__ - __TAKISTART__,
            fill = yes, fillval=$DD;
    MAIN:   file = %O,
            define = yes,
            start = __MAINSTART__,
            size = __FWSTART__ - __STACKSIZE__ - __MAINSTART__,
            fill = yes, fillval=$CC;    # Makes double-checking
                                        # contiguousness eeasier
    STACK:  file = %O,
            start = __FWSTART__ - __STACKSIZE__,
            size = __STACKSIZE__,
            fill = yes, fillval=$AA;
    FIRMWARE:
            file = %O,
            start = __FWSTART__,
            size = $FFF4 - - __FWSTART__;
}
SEGMENTS {
    ZEROPAGE: load = ZP,     type = zp;
    EXEHDR:   load = HEADER, type = ro;
    STARTUP:  load = MAIN,   type = ro;
    LOWCODE:  load = MAIN,   type = ro,  optional = yes;
    ONCE:     load = MAIN,   type = ro,  optional = yes;
    CODE:     load = MAIN,   type = ro;
    RODATA:   load = MAIN,   type = ro;
    DATA:     load = MAIN,   type = rw;
    BSS:      load = MAIN,   type = bss, define   = yes;
    FIRMWARE: load = FIRMWARE, type = ro;
    PATCHRESET:     # We don't want to completely boot the system,
                    # so we patch out cold restart, after initialization
              load = FIRMWARE, type = overwrite, start = $fa82;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
